generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  author_id   Int     @id @default(autoincrement())
  name_author String  @db.VarChar(100)
  biography   String? @db.Text
  books       Book[]

  @@map("authors")
}

model Book {
  book_id         Int               @id @default(autoincrement())
  author_id       Int?
  title           String            @db.VarChar(100)
  description     String?           @db.Text
  photo           String?           @db.VarChar(255)
  book_categories book_categories[]
  book_publishers book_publishers[]
  author          Author?           @relation(fields: [author_id], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "books_ibfk_1")
  loans           Loan[]

  @@index([author_id], map: "author_id")
  @@map("books")
}

model User {
  id               Int      @id @default(autoincrement())
  username         String   @unique @db.VarChar(50)
  password         String   @db.VarChar(100)
  role             String   @default("user") @db.VarChar(10)
  profile_image    String?  @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(0)
  photo            String?  @db.VarChar(255)
  description      String?  @db.Text
  favorite_book_id Int?
  loans            Loan[]

  @@map("users")
}

model Loan {
  loans_id    Int       @id @default(autoincrement())
  user_id     Int?
  book_id     Int?
  loan_date   DateTime  @db.DateTime(0)
  due_date    DateTime? @db.DateTime(0)
  returned_at DateTime? @db.DateTime(0)
  is_overdue  Boolean   @default(false)
  fine_amount Decimal   @default(0.00) @db.Decimal(10, 2)
  user        User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "loans_ibfk_1")
  book        Book?     @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "loans_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
  @@map("loans")
}

model book_categories {
  book_id     Int
  category_id Int
  books       Book       @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "book_categories_ibfk_1")
  categories  categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "book_categories_ibfk_2")

  @@id([book_id, category_id])
  @@index([category_id], map: "category_id")
}

model book_publishers {
  book_id    Int
  publish_id Int
  books      Book       @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "book_publishers_ibfk_1")
  publishers publishers @relation(fields: [publish_id], references: [publish_id], onDelete: NoAction, onUpdate: NoAction, map: "book_publishers_ibfk_2")

  @@id([book_id, publish_id])
  @@index([publish_id], map: "publish_id")
}

model categories {
  category_id     Int               @id @default(autoincrement())
  name_category   String            @db.VarChar(100)
  book_categories book_categories[]
}

model publishers {
  publish_id      Int               @id @default(autoincrement())
  publish_name    String            @db.VarChar(100)
  book_publishers book_publishers[]
}
